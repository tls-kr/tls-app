{
    "openapi": "3.0.0",
    "info": {
        "version": "1.1.0",
        "title": "TLS API",
        "description": "The API defined by the TLS web application"
    },
    "servers": [
        {
            "url": "/exist/apps/tls-app",
            "description": "Relative URL using the current host and port"
        }
    ],
    "tags": [
		{
			"name": "path",
			"description": "Route has special characters or parameters in path"
		},
        {
			"name": "view",
			"description": "View documents via an HTML template"
		},
        {
			"name": "api",
			"description": "AJAX requests"
		},
		{
			"name": "query",
			"description": "Route specifies query parameters"
		},
		{
			"name": "body",
			"description": "Route specifies expected body"
		},
		{
			"name": "header",
			"description": "Route specifies header parameters"
		},
		{
			"name": "files",
			"description": "File up- and downloads of various kinds"
		},
        {
            "name": "errors",
            "description": "Routes with custom error handling"
        },
        {
			"name": "auth",
			"description": "Authenticate, login or logout database user"
		}
	],
    "security": [
        {
            "cookieAuth": []
        },
        {
            "basicAuth": []
        }
    ],
    "components": {
        "securitySchemes": {
            "basicAuth": {
                "type": "http",
                "scheme": "basic"
            },
            "cookieAuth": {
                "type": "apiKey",
                "name": "org.hxwd.tls",
                "in": "cookie"
            }
        }
    },
    "paths": {
        "/logout": {
            "get": {
                "summary": "User Logout",
                "description": "End session of the current user",
                "operationId": "auth:logout",
                "tags": ["auth", "query"],
                "parameters": [
                    {
                        "name": "logout",
                        "in": "query",
                        "description": "Set to some value to log out the current user",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": { "type": "boolean" }
                                    }
                                }
                            }
                        }
                    },
                    "301": {
                        "description": "Redirect with the logout parameter set.",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": { "description": "unauthorized" }
                }
            }
        },
        "/login": {
            "post": {
                "summary": "User Login",
                "description": "Start an authenticated session for the given user",
                "tags": ["auth", "body"],
                "operationId": "auth:login",
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": [ "user" ],
                                "properties": {
                                    "user": {
                                        "description": "Name of the user",
                                        "type": "string"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password"
                                    }
                                }
                            }
                        },
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "required": [ "user" ],
                                "properties": {
                                    "user": {
                                        "description": "Name of the user",
                                        "type": "string"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user": { "type": "string" },
                                        "groups": {
                                            "type": "array",
                                            "items": { "type": "string" }
                                        },
                                        "dba": { "type": "boolean" },
                                        "domain": { "type": "string" }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Wrong user or password"
                    }
                },
                "security": [{ "cookieAuth": [] }]
            }
        },
  "/krxitems": {
      "get": {
        "summary": "Retrieve items with pagination and search",
        "operationId": "src:items",
        "description": "Returns a paginated list of items in HTML format. Optionally, a search term can be provided.",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string",
              "default": "君子"
            },
            "required": true,
            "description": "The search term to search for."
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default" : 1
            },
            "required": true,
            "description": "The starting index of items."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": "50"
            },
            "required": true,
            "description": "The number of items"
          },
          {
            "in": "query",
            "name": "search-type",
            "schema": {
              "type": "string",
              "enum": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
              "default": "1"
            },
            "required": false,
            "description": "Search types: \n - `1`: search texts\n - `2`: search dictionary\n - `3`: search translations\n - `4`: search everyting\n - `5` search only one text\n - `6`: search translated lines\n - `7`: search titles\n - `8`: tabulate search results by text\n - `9`: advanced search\n - `10`: search bibliography\n - `11`: search notes\n - `12`: display list of texts"
          },
          {
            "in": "query",
            "name": "mode",
            "schema": {
              "type": "string",
              "enum": ["date", "date-desc", "rating"],
              "default": "date"
            },
            "required": false,
            "description": "Sort modes : \n - `date`: order by text date (ascending)\n - `date-desc`: order by text date (descending)\n - `rating`: order by text rating"
          },
          {
            "in": "query",
            "name": "textid",
            "schema": {
              "type": "string",
              "default" : ""
            },
            "required": false,
            "description": "The textid of the requested text."
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "default" : ""
            },
            "required": false,
            "description": "The filter category to be applied."
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response with HTML content.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<html>\n  <body>\n    <h1>Items</h1>\n    <p>List of items filtered by search term...</p>\n  </body>\n</html>"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid query parameters."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
  },
    "/krxitemcount": {
      "get": {
        "summary": "Count the hits in a search",
        "operationId": "src:itemcount",
        "description": "Returns an HTML fragment with the item count. For compatibility, the same parameters as in search are allowed, all except query will be ignored.",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "schema": {
              "type": "string",
              "default": "君子"
            },
            "required": true,
            "description": "The search term to search for."
          },
          {
            "in": "query",
            "name": "start",
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default" : 1
            },
            "required": false,
            "description": "The starting index of items."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": "50"
            },
            "required": false,
            "description": "The number of items"
          },
          {
            "in": "query",
            "name": "search-type",
            "schema": {
              "type": "string",
              "enum": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
              "default": "1"
            },
            "required": false,
            "description": "Search types: \n - `1`: search texts\n - `2`: search dictionary\n - `3`: search translations\n - `4`: search everyting\n - `5` search only one text\n - `6`: search translated lines\n - `7`: search titles\n - `8`: tabulate search results by text\n - `9`: advanced search\n - `10`: search bibliography\n - `11`: search notes\n - `12`: display list of texts"
          },
          {
            "in": "query",
            "name": "mode",
            "schema": {
              "type": "string",
              "enum": ["date", "date-desc", "rating"],
              "default": "date"
            },
            "required": false,
            "description": "Sort modes : \n - `date`: order by text date (ascending)\n - `date-desc`: order by text date (descending)\n - `rating`: order by text rating"
          },
          {
            "in": "query",
            "name": "textid",
            "schema": {
              "type": "string",
              "default" : ""
            },
            "required": false,
            "description": "The textid of the requested text."
          },
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string",
              "default" : ""
            },
            "required": false,
            "description": "The filter category to be applied."
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response with HTML content.",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<span id=\"krx-search\">漢リポ: <a class=\"btn badge badge-light chn-font\" target=\"kanripo\" title=\"Search 君子 in Kanseki Repository\" style=\"background-color:paleturquoise\" href=\"krx/items?query=君子\">君子</a></span>"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid query parameters."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    },
    "/citations/{perspective}/{grouping}":{
        "get": {
            "security": [],
            "description" : "Citations, analyzed in different forms",
            "summary": "Citations",
            "operationId" : "lct:citations",
            "parameters": [
                {
                    "required": false,
                    "name": "count",
                    "in": "query",
                    "schema": {
                      "type" : "integer",
                      "maximum": 100,
                      "default": 10
                      }
                },
                {
                    "required": false,
                    "name": "item",
                    "in": "query",
                    "schema": {
                      "type" : "string"
                      }
                },
                {
                    "required" : true,
                    "name": "perspective",
                    "in": "path",
                    "schema": {
                       "type" : "string",
                       "default" : "chars",
                       "enum" : ["concepts", "chars", "users", "texts"]
                       }
                },
                {
                    "in": "path",
                    "name": "grouping",
                    "required": true,
                    "schema": {
                     "type" : "string",
                     "enum" : ["diachronic", "by-text", "by-syn-func", "by-char", "by-concept", "none"],
                     "default" : "diachronic"
                     }
                },
                {
                    "in": "query",
                    "name": "group2",
                    "required": false,
                    "schema": {
                     "type" : "string",
                     "enum" : ["diachronic", "by-text", "by-syn-func", "by-char", "by-concept", "none"],
                     "default" : "none"
                     }
                     
                },
                {
                    "in": "query",
                    "name": "sort",
                    "required": true,
                    "schema": {
                     "type" : "string",
                     "enum" : ["by-freq-descending", "by-freq-ascending", "by-date-ascending", "by-date-descending"],
                     "default" : "by-freq-descending"
                     }
                     
                }
            ],
            "responses": {
                "200" : 
                {
                "description": "A successful response with HTML content.",
                "content": {
                   "text/html": {
                    "schema": {
                     "type": "string",
                     "example": "<span id=\"krx-search\">漢リポ: <a class=\"btn badge badge-light chn-font\" target=\"kanripo\" title=\"Search 君子 in Kanseki Repository\" style=\"background-color:paleturquoise\" href=\"krx/items?query=君子\">君子</a></span>"
                }
              }
            }
                    
                }
            }
        }
    },

		"/api/parameters": {
            "get": {
                "description": "Parameters in URL and header (GET)",
                "summary": "Test parameters of varying types passed in URL and header",
                "operationId": "rutil:debug",
                "tags": ["query", "header"],
                "parameters": [
                    {
                        "name": "num",
                        "in": "query",
                        "schema":{
                            "type": "number"
                        }
                    },
                    {
                        "name": "int",
                        "in": "query",
                        "schema":{
                            "type": "integer"
                        }
                    },
                    {
                        "name": "bool",
                        "in": "query",
                        "schema":{
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "string",
                        "in": "query",
                        "schema":{
                            "type": "string"
                        }
                    },
                    {
                        "name": "defaultParam",
                        "in": "query",
                        "schema":{
                            "type": "string",
                            "default": "abcdefg"
                        }
                    },
                    {
                        "name": "X-start",
                        "in": "header",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200":{
                        "description": "JSON dump of request",
                        "content": {
                            "application/json": {
                                "schema":{
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Parameters in URL and header (POST)",
                "summary": "Test parameters of varying types passed in URL and header",
                "operationId": "rutil:debug",
                "tags": ["query", "header"],
                "parameters": [
                    {
                        "name": "num",
                        "in": "query",
                        "schema":{
                            "type": "number"
                        }
                    },
                    {
                        "name": "int",
                        "in": "query",
                        "schema":{
                            "type": "integer"
                        }
                    },
                    {
                        "name": "bool",
                        "in": "query",
                        "schema":{
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "string",
                        "in": "query",
                        "schema":{
                            "type": "string"
                        }
                    },
                    {
                        "name": "defaultParam",
                        "in": "query",
                        "schema":{
                            "type": "string",
                            "default": "abcdefg"
                        }
                    },
                    {
                        "name": "X-start",
                        "in": "header",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200":{
                        "description": "JSON dump of request",
                        "content": {
                            "application/json": {
                                "schema":{
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/member/{user}/recent": {
            "parameters": [
               {
               "name": "user",
               "required": true,
               "in": "path"

               }
               ],
            "get": {
                "summary": "Recent activity",
                "operationId": "api:date",
                "tags": ["view"],
                "responses": {
                    "200":{
                        "description": "JSON dump of request",
                        "content": {
                            "application/json": {
                                "schema":{
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/dates": {
            "get": {
                "summary": "Dates in querystring",
                "operationId": "api:date",
                "tags": ["query"],
                "parameters": [
                    {
                        "name": "date",
                        "in": "query",
                        "schema":{
                            "type": "string",
                            "format": "date"
                        }
                    },
                    {
                        "name": "dateTime",
                        "in": "query",
                        "schema":{
                            "type": "string",
                            "format": "date-time"
                        }
                    }
                ],
                "responses": {
                    "200":{
                        "description": "JSON dump of request",
                        "content": {
                            "application/json": {
                                "schema":{
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/paths/{path}":{
            "get": {
                "summary": "Parameter specified in last path component",
                "operationId": "api:get-uploaded-data",
                "tags": ["path", "files"],
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema":{
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200":{
                        "description": "file contents, if found",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "File not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Post body with several content-types",
                "x-constraints": {
                    "user": "admin" 
                },
                "operationId": "api:upload-data",
                "tags": ["path", "body", "files", "auth"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "*/*": {
                            "schema": {
                                "type": "string",
                                "format": "binary"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema":{
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Returns uploaded string",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Content was invalid",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/$op-er+ation*!":{
            "get": {
                "summary": "Get path using a $ character",
                "operationId": "rutil:debug",
                "tags": ["path"],
                "responses": {
                    "200":{
                        "description": "JSON dump of request",
                        "content": {
                            "application/json": {
                                "schema":{
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Post to path using a $ character",
                "operationId": "rutil:debug",
                "tags": ["path"],
                "responses": {
                    "200":{
                        "description": "JSON dump of request",
                        "content": {
                            "application/json": {
                                "schema":{
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/errors": {
            "get": {
                "summary": "Reports an error via fn:error function",
                "operationId": "api:error-triggered",
                "tags": ["errors"],
                "responses": {
                    "404": {
                        "description": "Not found",
                        "content": {
                            "application/json":{
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Reports a dynamic XQuery error",
                "operationId": "api:error-dynamic",
                "tags": ["errors"],
                "responses": {
                    "500": {
                        "description": "XQuery error",
                        "content": {
                            "application/json":{
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Reports an explicit error",
                "operationId": "api:error-explicit",
                "tags": ["errors"],
                "responses": {
                    "500": {
                        "description": "XQuery error",
                        "content": {
                            "application/xml": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/avatar": {
            "get": {
                "summary": "Retrieve avatar as SVG",
                "operationId": "api:avatar",
                "tags": ["files"],
                "responses": {
                    "200": {
                        "description": "Get file with a specific mime type",
                        "content": {
                            "image/svg+xml":{
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/errors/handle": {
            "get": {
                "summary": "Test error handler",
                "operationId": "api:error-dynamic",
                "x-error-handler": "api:handle-error",
                "tags": ["errors"],
                "responses": {
                    "500": {
                        "description": "XQuery error",
                        "content": {
                            "text/html": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/upload/single/{path}": {
            "post": {
                "summary": "Upload a single file.",
                "description": "In this example, the file path is part of the URL.",
                "operationId": "upload:single",
                "tags": ["path", "body", "files"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "required": ["file"],
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "path",
                        "in": "path",
                        "required": true,
                        "schema":{ "type": "string" }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created uploaded file",
                        "content": {
                            "application/json": {
                                "schema": { "type": "string" }
                            }
                        }
                    },
                    "400": {
                        "description": "Content was invalid",
                        "content": {
                            "application/json": {
                                "schema": { "type": "string" }
                            }
                        }
                    }
                }
            }
        },
        "/upload/batch": {
            "post": {
                "summary": "Upload a batch of files",
                "operationId": "upload:batch",
                "tags": ["body", "files"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "responses": {
                    "201": {
                        "description": "Created uploaded file",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "uploaded": { "type": "array" }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Content was invalid",
                        "content": {
                            "application/json": {
                                "schema": { "type": "string" }
                            }
                        }
                    }
                }
            }
        },
        "/upload/base64": {
            "post": {
                "summary": "Upload a base64-encoded file.",
                "operationId": "upload:base64",
                "tags": ["body", "files"],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "data": {
                                        "type": "string",
                                        "format": "base64"
                                    }
                                }
                            }
                        }
                    }
                },
                "parameters": [],
                "responses": {
                    "201": {
                        "description": "Created uploaded file",
                        "content": {
                            "application/json": {
                                "schema": { "type": "string" }
                            }
                        }
                    },
                    "400": {
                        "description": "Content was invalid",
                        "content": {
                            "application/json": {
                                "schema": { "type": "string" }
                            }
                        }
                    }
                }
            }
        }
    }
}
